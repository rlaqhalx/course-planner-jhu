{
  "version": 3,
  "sources": ["../../@mui/material/styles/cssUtils.js", "../../@mui/material/styles/responsiveFontSizes.js", "dep:@mui_material_styles_responsiveFontSizes"],
  "sourcesContent": ["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alignProperty = alignProperty;\nexports.convertLength = convertLength;\nexports.fontGrid = fontGrid;\nexports.getUnit = getUnit;\nexports.isUnitless = isUnitless;\nexports.responsiveProperty = responsiveProperty;\nexports.toUnitless = toUnitless;\n\nfunction isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n} // Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\n\n\nfunction getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n} // Emulate the sass function \"unitless\"\n\n\nfunction toUnitless(length) {\n  return parseFloat(length);\n} // Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\n\n\nfunction convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length); // Optimize for cases where `from` and `to` units are accidentally the same.\n\n    if (fromUnit === toUnit) {\n      return length;\n    } // Convert input length to pixels.\n\n\n    let pxLength = toUnitless(length);\n\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    } // Convert length in pixels to the output unit\n\n\n    let outputLength = pxLength;\n\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\n\nfunction alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n} // fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\n\n\nfunction fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\n\n\nfunction responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n\n    if (transform !== null) {\n      value = transform(value);\n    }\n\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}", "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = responsiveFontSizes;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _utils = require(\"@mui/utils\");\n\nvar _cssUtils = require(\"./cssUtils\");\n\nfunction responsiveFontSizes(themeInput, options = {}) {\n  const {\n    breakpoints = ['sm', 'md', 'lg'],\n    disableAlign = false,\n    factor = 2,\n    variants = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline']\n  } = options;\n  const theme = (0, _extends2.default)({}, themeInput);\n  theme.typography = (0, _extends2.default)({}, theme.typography);\n  const typography = theme.typography; // Convert between CSS lengths e.g. em->px or px->rem\n  // Set the baseFontSize for your project. Defaults to 16px (also the browser default).\n\n  const convert = (0, _cssUtils.convertLength)(typography.htmlFontSize);\n  const breakpointValues = breakpoints.map(x => theme.breakpoints.values[x]);\n  variants.forEach(variant => {\n    const style = typography[variant];\n    const remFontSize = parseFloat(convert(style.fontSize, 'rem'));\n\n    if (remFontSize <= 1) {\n      return;\n    }\n\n    const maxFontSize = remFontSize;\n    const minFontSize = 1 + (maxFontSize - 1) / factor;\n    let {\n      lineHeight\n    } = style;\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight) && !disableAlign) {\n      throw new Error(process.env.NODE_ENV !== \"production\" ? `MUI: Unsupported non-unitless line height with grid alignment.\nUse unitless line heights instead.` : (0, _utils.formatMuiErrorMessage)(6));\n    }\n\n    if (!(0, _cssUtils.isUnitless)(lineHeight)) {\n      // make it unitless\n      lineHeight = parseFloat(convert(lineHeight, 'rem')) / parseFloat(remFontSize);\n    }\n\n    let transform = null;\n\n    if (!disableAlign) {\n      transform = value => (0, _cssUtils.alignProperty)({\n        size: value,\n        grid: (0, _cssUtils.fontGrid)({\n          pixels: 4,\n          lineHeight,\n          htmlFontSize: typography.htmlFontSize\n        })\n      });\n    }\n\n    typography[variant] = (0, _extends2.default)({}, style, (0, _cssUtils.responsiveProperty)({\n      cssProperty: 'fontSize',\n      min: minFontSize,\n      max: maxFontSize,\n      unit: 'rem',\n      breakpoints: breakpointValues,\n      transform\n    }));\n  });\n  return theme;\n}", "export default require(\"./node_modules/@mui/material/styles/responsiveFontSizes.js\");"],
  "mappings": "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",
  "names": []
}
